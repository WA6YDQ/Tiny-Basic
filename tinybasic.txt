--- Tiny Basic Manual ---


BASIC statements and functions

-------------

DIM/LET

10 let a=1
20 let b=7*6
30 let c=a*b, d=10*a
40 dim 20
50 let @(0)=100
60 let @(1)=a*b
70 let @(2)=c+d/5
80 let a$="hello, world!"

Let statements are not optional, and must preceed 
all variable assignments.

The dim statement is used to allocate memory for
an integer array. There is only one integer array
and it begins with @. The index is a number or letter
variable from 0 thru the dim statement.

All integer variables a single letters from a thru z
and are 32 bit signed. They range from -(2^32/2)-1 thru
+(2^32/2)-1. Array variables have the same range.

NOTE: Integer variables on the Arduino Due and most
posix systems are 32 bit. There may be posix machines
with smaller integers. This will define the integer size.

There can be no spaces between the variable letter and
the '=' and no space between the '=' and the assignment
variable or number. After an assignment there can be a 
comma and another assignment.

--------------

EXPRESSIONS

Expressions are math and logic expressions between two
values seperated by an operand.

----
NOTE: arithmetic evaluation is left to right - there is NO order
of presidence. + and - can occur before * and /.
----

Valid arithmetic operands are:
+	addition
-	subtraction
*	multiplication
/	division
%	modulo (remainder from division)
E	exponentiation 

Valid logical operands are:
&	logical and
|	logical or
^	logical xor
~	logical compliment

Examples:

Ok> 10 let a=10+20
Ok> 20 let b=50-a
Ok> 30 let c=a*b
Ok> 40 let d=a/2
Ok> 50 print a,b,c,d
Ok> run
30   20   600   15



10 let a=2|1
20 let b=8&3
30 let c=15|7
40 let d=15&6
50 print a,b,c,d
Ok> run
3   0   15   6


10 let a=0
20 let a=a~1
30 print a
Ok> run
-1


Ok> 10 let a=2E5
Ok> 20 print a, 2e5
Ok> run
32   32


---------------------
PRINT and INPUT

The PRINT statement sends the values of variables, expressions 
and strings to your output device (stdout, serial out etc).

PRINT recognizes the following:
variables a-z
string variables a$-z$ (seperate from integer variables)
integer arrays @()
double quotes for strings: "this is a string"
commas separates output by 3 spaces: a,b,123
semi-colons prevents line feeds: 10 print a,b;
PRINT also recognizes expressions:
10 PRINT 123*456, a*260+c, 2^8

The INPUT statement reads from the input device into a variable.
INPUT recognizes the following:
double quotes for printed strings (prompts): "this is a string"
commas: separates variables and strings
integer variables a-z
string variables a$-z$
String and integer variables are seperate
10 INPUT "enter a number ",a
20 INPUT "Enter a name: ";n$
Note that array variables cannot be input to.

-----------------------
GOTO/GOSUB/RETURN

The GOTO statement transfers execution to another line.
10 GOTO 100
will continue execution at line 100

The GOSUB statement jumps to another line (like the
GOTO statement) but stores the current address + 1 to the 
stack. The RETURN statement pulls the address from the stack
and returns to the statement following the GOSUB statement.

10 GOSUB 100
20 print "done"
30 end
100 print a+b
110 return

The stack is 10 levels deep. 

-----------------------
STOP/END/EXIT

The END statement ends program execution.

The STOP statement stops program execution
(future addition of a CONT statement will allow 
execution following the STOP statement).

The EXIT statement (posix only; not valid for Arduino)
exits the basic interpreter and returns control to the
operating system.

---------------------------
FOR/TO/STEP/NEXT

The FOR statement starts a program loop using a variable 
as a counter:

10 FOR a=1 TO 100 STEP 5
20 print a, a*a
30 NEXT a

The STEP keyword is optional. The variable must be 
in the range of [a-z]. 

You can also count backwards:
10 FOR a=100 TO 1 STEP -1

Variables can be used in the TO and STEP positions:
10 FOR a=b TO c STEP d
20 NEXT a


---------------------------
IF/THEN

The IF statement performs a logical test with the result
being true or false (1/0).

The statement following the IF performs the following:

THEN 100	transfers program execution to line 100 following a 
true evaluation

GOTO 200 	transfers program execution to line 200 following
a true evaluation

GOSUB 50	stores the address + 1 to the stack, then jumps to line
50 following a true evaluation

RETURN		pops the return address off the stack and returns
execution to this address following a true evaluation.

STOP		stops program execution following a true evaluation.

Evaluations include the following:
=	ie a=b	The variables a and b are the same
#	ie a#b	The variables a and b are not the same
>	ie a>b	The variable a is greater then b
<	ie a<b	The variable a is less than b
&	ie a&b	The logical and of a and b
|	ie a|b	The logical or of a and b
^	ie a^b	The logical xor of a and b

Examples:
10 IF a=b THEN 100
20 IF a#b GOTO 50
30 IF a>b GOSUB 200
40 IF a<b RETURN
50 IF a>100 STOP

Expressions are evaluated as well:
10 IF a>100/b+c THEN 200

Note that if you use THEN only a line number can follow.

------------------
FILEOPEN/FILECLOSE/FILEREAD/FILEWRITE

The FILEOPEN statement opens a file pointer for later use.
The format is:
FILEOPEN filename Rr/Ww

The filename is the name of the file to open on the SD card (arduino)
or local filesystem (posix). 

r/w sets read (R/r) and write (W/w). If write is selected, the file
will be appended to (both arduino and posix). If you need to write at the 
top of a file use a new file or delete the old first.

The FILECLOSE statement closes a previously open file.

The FILEWRITE statement writes strings and variable data
to an open file. This is useful for data collection.

Example:
10 FILEWRITE a,b,c
20 FILEWRITE "This is a string"
30 for n=1 to 50
40 FILEWRITE @(n)
50 next n

The FILEREAD statement reads from a file into a variable:
10 FILEWRITE a
20 FILEREAD b

Line 10 write the value of a to an open file
Line 20 reads the value into the variable b

When the file reaches the end, the variable read by FILEREAD will
be 0.

Example:
10 FILEOPEN data.txt r
20 FILEREAD a
30 IF a=0 then 100
40 PRINT a
50 GOTO 20
100 FILECLOSE
110 END

----------------------------
SLEEP/DELAY

SLEEP [n] is a posix only statement. The SLEEP
statement will pause program executation for integer n seconds.

DELAY [n] is an Arduino only statement.
The DELAY statement pauses execution for n milliseconds. 

Expect the DELAY statement to also work for posix systems in 
the very near future.


------------------------------
ABS()  and RANDOM()

The ABS(n) function returns the absolute value of the variable n.
n must be in the range of [a-z]. 

The RANDOM() function returns a random number in the 
range of 0 and 2^32/2 -1


------------------------------
PINREAD(n) and PINREAD(A0..11)

The PINREAD function returns the value of a digital pin
when n is an integer value. n can be a variable [a-z] or
number in the range of 0-the highest pin number on the Arduino
board.

It is up to you to use the correct pin number. 

When the pin begins with a capital A then PINREAD will
return the analog value in the range of 0-65535.

A0 thru A11 are the only valid values for the Arduino due board.

NOTE: The PINREAD function is only (currently) valid for
the Arduino Due board.

Example:
10 let a=PINREAD(23)
20 let b=PINREAD(A3)
30 let c=PINREAD(f)

----------------------------
PINSET(n)/PINCLR(n)

This is an Arduino Due command only.

The PINSET(n) command does two things:
1. It sets the pin number given in n to OUTPUT
2. It then sets the pin to a high state (1).

The pin will remain as an output until either a 
PINREAD command is given to the pin or the Arduino board 
is reset or powered off. The pin will stay at a high 
state until changed with a PINCLR command.

The PINCLR command is the same, except it clears the pin
(set to low or 0).

The variable n can be a number (0, 22, 50, etc) or a variable
from [a-z].

Example:
10 LET p=40
20 PINCLR(p)
30 PINSET(34)

